import rodados.*
import dependencias.*
import pedidos.*
describe "dependencias"{
	var cachito = new Corsa(color = "rojo")
	
test "dependencia deport y cultura" {
	const dependenciaDeporte = new Dependencia()
	dependenciaDeporte.empleados(45)
	/*
	 * var corsaVerde = new Corsa(color = "verde")
	 * dependenciaDeporte.agregarAFlota(new Corsa(color = "azul"))
	 */
	
	var corsaAzul = new Corsa()
	corsaAzul.color("azul")
	var corsaVerde = new Corsa()
	corsaVerde.color("verde")
	var kwidConTanque = new Kwid() 
	kwidConTanque.tanqueDeGas(true)	
	var autoEspecial = new AutosEspeciales( capacidad = 5,velocidadMaxima = 160, peso = 1200 , color = "beige")
//	autoEspecial.capacidad(5)
//	autoEspecial.velocidadMaxima(160)
//	autoEspecial.peso(1200)
//	autoEspecial.color("beige")
	assert.equals(5,autoEspecial.capacidad())
	assert.equals(160,autoEspecial.velocidadMaxima())
	assert.equals(1200,autoEspecial.peso())
	assert.equals("beige",autoEspecial.color())
	dependenciaDeporte.agregarAFlota(cachito)
	dependenciaDeporte.agregarAFlota(corsaAzul)
	dependenciaDeporte.agregarAFlota(corsaVerde)
	dependenciaDeporte.agregarAFlota(kwidConTanque)
	dependenciaDeporte.agregarAFlota(autoEspecial)
	
	assert.equals(6450,dependenciaDeporte.pesoTotalFlota())
	assert.that(dependenciaDeporte.estaBienEquipada())
	assert.equals(7,dependenciaDeporte.capacidadTotalEnColor("azul"))
	assert.equals("beige",dependenciaDeporte.colorDelRodadoMasRapido())
	assert.that(dependenciaDeporte.esGrande())
	assert.equals(25,dependenciaDeporte.capacidadFaltante())
	
	
	const dependenciaCultura = new Dependencia()
	dependenciaCultura.empleados(31)
	assert.equals(31,dependenciaCultura.empleados())
	
	var kwidSinTanque = new Kwid()
	kwidSinTanque.tanqueDeGas(false)
	traffic.interior(interiorPopular)
	traffic.motor(motorBataton)
	
	dependenciaCultura.agregarAFlota(cachito)
	dependenciaCultura.agregarAFlota(kwidConTanque)
	dependenciaCultura.agregarAFlota(kwidConTanque)
	dependenciaCultura.agregarAFlota(kwidSinTanque)
	dependenciaCultura.agregarAFlota(traffic)
	
	assert.equals(10700,dependenciaCultura.pesoTotalFlota())
	assert.notThat(dependenciaCultura.estaBienEquipada())
	assert.equals(10,dependenciaCultura.capacidadTotalEnColor("azul"))
	assert.equals("rojo",dependenciaCultura.colorDelRodadoMasRapido())
	assert.notThat(dependenciaCultura.esGrande())
	assert.equals(5,dependenciaCultura.capacidadFaltante())
	
	}
test "pedidos cachito satisface"{
	const pedido1 = new Viaje( distanciaARecorrer = 960 , tiempoMaximo = 8, cantidadPasajeros = 4, 
				coloresIncompatibles = #{"azul","negro"})
	assert.that(pedido1.satisfacePedido(cachito))
}

test "pedidos cachito no satisface"{
	const pedido2 = new Viaje( distanciaARecorrer = 960 , tiempoMaximo = 6, cantidadPasajeros = 6, 
				coloresIncompatibles = #{"azul","rojo","negro"})
	assert.notThat(pedido2.satisfacePedido(cachito))
}

}
